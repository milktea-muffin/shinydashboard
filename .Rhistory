list.files()
library('shiny')
runApp('app.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
sidebar <- dashboardSidebar(
sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
menuItem("Widgets", tabName = "widgets", icon = icon("th"),
badgeLabel = "new", badgeColor = "green"),
menuSubItem(text, tabName = NULL, href = NULL, newtab = TRUE,
icon = shiny::icon("angle-double-right"), selected = NULL)
menuItem("Source code", icon = icon("file-code-o"),
href = "https://github.com/rstudio/shinydashboard/", newtab = TRUE)
)
)
sidebar <- dashboardSidebar(
sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
menuItem("Widgets", tabName = "widgets", icon = icon("th"),
badgeLabel = "new", badgeColor = "green"),
menuSubItem(text, tabName = NULL, href = NULL, newtab = TRUE,
icon = shiny::icon("angle-double-right"), selected = NULL)
menuItem("Source code", icon = icon("file-code-o"),
href = "https://github.com/rstudio/shinydashboard/", newtab = TRUE)
)
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
plot(cars)
runApp()
runApp()
?validColors
runApp()
runApp()
?validColors
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?runApp
?dashboardPage
?dashboardBody
?tags
?dashboardBody
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?validColors
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?code
runApp()
runApp()
runApp()
names(tags)
tags
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
library(shinydashboard)
?dateInput
runApp()
runApp()
runApp()
library(shiny)
runApp()
runApp()
runApp()
library(shiny)
runApp()
.libPaths()
install.packages("shinydashboard", lib="../electron-quick-start/R-Portable-Mac/library/")
install.packages("shinydashboard", lib = "../electron-quick-start/R-Portable-Mac/library/")
runA
library(shiny)
runApp()
runApp()
library(shiny)
runApp()
tab_box <- tabItem(tabName = "box",
fluidRow(
box(
# パラメータ
title = "Histogram",# タイトル
status = "primary", # タイトルの背景
solidHeader = TRUE, # タイトル全体を塗りつぶすかラインにするか
collapsible = TRUE, # boxを折りたためるようにするかどうか
# 本文
plotOutput("box_plot1", height = 250)
),
box(
# パラメータ
title = "Histogram",
background = "light-blue", # 背景
collapsible = TRUE,
# 本文
plotOutput("box_plot2", height = 250)
),
),
fluidRow(
box(
# パラメータ
title = "Inputs",
status = "warning",
solidHeader = FALSE,
collapsible = TRUE,
# 本文
"Box content here",
br(),
"More box content",
sliderInput("box_slider1", "Slider input:", 1, 100, 50),
textInput("text", "Text input:")
),
box(
# パラメータ
title = "Inputs",
status = "warning",
background = "yellow",
solidHeader = FALSE,
collapsible = FALSE,
# 本文
"Box content here",
br(),
"More box content",
sliderInput("box_slider2", "Slider input:", 1, 100, 50),
textInput("text", "Text input:")
)
)
)
tab_box <- tabItem(tabName = "box",
fluidRow(
box(
# パラメータ
title = "Histogram",# タイトル
status = "primary", # タイトルの背景
solidHeader = TRUE, # タイトル全体を塗りつぶすかラインにするか
collapsible = TRUE, # boxを折りたためるようにするかどうか
# 本文
plotOutput("box_plot1", height = 250)
),
box(
# パラメータ
title = "Histogram",
background = "light-blue", # 背景
collapsible = TRUE,
# 本文
plotOutput("box_plot2", height = 250)
),
),
fluidRow(
box(
# パラメータ
title = "Inputs",
status = "warning",
solidHeader = FALSE,
collapsible = TRUE,
# 本文
"Box content here",
br(),
"More box content",
sliderInput("box_slider1", "Slider input:", 1, 100, 50),
textInput("text", "Text input:")
),
box(
# パラメータ
title = "Inputs",
status = "warning",
background = "yellow",
solidHeader = FALSE,
collapsible = FALSE,
# 本文
"Box content here",
br(),
"More box content",
sliderInput("box_slider2", "Slider input:", 1, 100, 50),
textInput("text", "Text input:")
)
)
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?downloadButton
?downloadLink
runApp()
?downloadHandler
?downloadHandler
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?tabBox
?box
runApp()
?infoBox
?tabBox
?tabPanel
?tabBox
?infoBox
?valueBox
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?tabPanel
runApp()
runApp()
runApp()
library(shiny)
runApp()
?tabBox
?tabPanel
runApp()
runApp()
?dateInput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?selectizeInput
runApp()
runApp()
install.packages("RSQLite")
library(RSQLite)
library(shiny)
runApp()
library(DT)
shiny::runApp('shiny')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?renderDT
runApp()
runApp()
icon_df <- read.csv("icon.txt", sep="\t", header = FALSE, stringsAsFactors = FALSE)
icon_df <- read.csv("shiny/html/icon.txt", sep="\t", header = FALSE, stringsAsFactors = FALSE)
icon_df
icon_df <- read.csv("shiny/html/icon.txt", sep="\t", header = FALSE, stringsAsFactors = FALSE)
icon_df
icon_df <- read.csv("shiny/html/icon.txt", sep="\t", header = FALSE, stringsAsFactors = FALSE, blank.lines.skip = TRUE, comment.char = "#")
icon_df
icon_df <- read.csv("shiny/html/icon.txt", sep="\t", header = FALSE, stringsAsFactors = FALSE, blank.lines.skip = TRUE, comment.char = "#")
icon_df
icon_df <- read.csv("shiny/html/icon.txt", sep="\t", header = TRUE, stringsAsFactors = FALSE, blank.lines.skip = TRUE, comment.char = "#")
icon_df
icon_df <- read.csv("shiny/html/icon.txt", sep="\t", header = FALSE, stringsAsFactors = FALSE, blank.lines.skip = TRUE, comment.char = "#")
icon_df
rownames(icon_df)[0] = "icon_name"
icon_df
colnames(icon_df)[0] = "icon_name"
icon_df
colnames(icon_df) = c("icon_name")
icon_df
apply(icon_df["icon_name"], icon)
?apply
apply(icon_df["icon_name"], 1, icon)
tmp <- apply(icon_df["icon_name"], 1, icon)
tmp
icon
icon_df["icon_html"] = apply(icon_df["icon_name"], 1, icon)
icon_df
icon
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?icon
?icon
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?selectInput
?reactive
runApp()
runApp()
?observe
runApp()
runApp()
runApp()
library(g3viz)
cgds <- cgdsr::CGDS("http://www.cbioportal.org/")
cdgs
cgds
cgdsr::test(cgds)
all.studies <- cgdsr::getCancerStudies(cgds)
all.studies
View(all.studies)
runApp()
all.studies$cancer_study_id
as.list(all.studies$cancer_study_id)
runApp()
runApp()
runApp()
?observe
?observeEvent
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?renderText
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
##----------------------------------------------------------------------------##
## bioフォルダのserverで共通して利用するライブラリや変数など
##----------------------------------------------------------------------------##
#
# -- g3viz::lollipop
#   https://rdrr.io/cran/g3viz/
#   https://cran.rstudio.com/web/packages/g3viz/vignettes/introduction.html
#
library(g3viz)
g3LollipopOutput()
runApp()
library(shiny)
runApp()
g3viz::g3LollipopOutput()
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("../shiny-variant-viewer/")
runApp()
setwd("../shinydashboard/")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source('~/GitHub/shinydashboard/shiny/dt/server_format.R')
runApp()
runApp()
runApp()
runApp()
install.packages('plotly')
library(ggplot2)
library(plotly)
p <- ggplot(data = diamonds, aes(x = cut, fill = clarity)) +
geom_bar(position = "dodge")
ggplotly(p)
d <- diamonds[sample(nrow(diamonds), 500), ]
plot_ly(d, x = d$carat, y = d$price,
text = paste("Clarity: ", d$clarity),
mode = "markers", color = d$carat, size = d$carat)
